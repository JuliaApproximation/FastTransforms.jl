import Base.Math: @horner

const FORWARD  =  true
const BACKWARD = false

const sqrtpi = 1.772453850905516027298
const edivsqrt2pi = 1.084437551419227546612

"""
Compute a typed 0.5.
"""
half(x::Number) = oftype(x,0.5)
half(x::Integer) = half(float(x))
half(::Type{T}) where {T<:Number} = convert(T,0.5)
half(::Type{T}) where {T<:Integer} = half(AbstractFloat)

"""
Compute a typed 2.
"""
two(x::Number) = oftype(x,2)
two(::Type{T}) where {T<:Number} = convert(T,2)

"""
The Kronecker ``\\delta`` function:

```math
\\delta_{k,j} = \\left\\{\\begin{array}{ccc} 1 & {\\rm for} & k = j,\\\\ 0 & {\\rm for} & k \\ne j.\\end{array}\\right.
```
"""
Œ¥(k::Integer,j::Integer) = k == j ? 1 : 0


"""
Pochhammer symbol ``(x)_n = \\frac{\\Gamma(x+n)}{\\Gamma(x)}`` for the rising factorial.
"""
function pochhammer(x::Number,n::Integer)
    ret = one(x)
    if n‚â•0
        for i=0:n-1
            ret *= x+i
        end
    else
        ret /= pochhammer(x+n,-n)
    end
    ret
end

pochhammer(x::Number,n::Number) = isinteger(n) ? pochhammer(x,Int(n)) : ogamma(x)/ogamma(x+n)

function pochhammer(x::Number,n::UnitRange{T}) where T<:Real
    ret = Vector{promote_type(typeof(x),T)}(length(n))
    ret[1] = pochhammer(x,first(n))
    for i=2:length(n)
        ret[i] = (x+n[i]-1)*ret[i-1]
    end
    ret
end

ogamma(x::Number) = (isinteger(x) && x<0) ? zero(float(x)) : inv(gamma(x))

"""
Stirling's asymptotic series for ``\\Gamma(z)``.
"""
stirlingseries(z) = gamma(z)*sqrt((z/œÄ)/2)*exp(z)/z^z

function stirlingseries(z::Float64)
    if z ‚â• 3274.12075200175       # N =  4
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273)
    elseif z ‚â• 590.1021805526798  # N =  5
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917)
    elseif z ‚â• 195.81733962412835 # N =  6
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666)
    elseif z ‚â• 91.4692823071966   # N =  7
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666,6.972813758365857e-5)
    elseif z ‚â• 52.70218954633605  # N =  8
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666,6.972813758365857e-5,-0.0005921664373536939)
    elseif z ‚â• 34.84031591198865  # N =  9
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666,6.972813758365857e-5,-0.0005921664373536939,-5.171790908260592e-5)
    elseif z ‚â• 25.3173982783047   # N = 10
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666,6.972813758365857e-5,-0.0005921664373536939,-5.171790908260592e-5,0.0008394987206720873)
    elseif z ‚â• 19.685015283078513 # N = 11
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666,6.972813758365857e-5,-0.0005921664373536939,-5.171790908260592e-5,0.0008394987206720873,7.204895416020011e-5)
    elseif z ‚â• 16.088669099569266 # N = 12
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666,6.972813758365857e-5,-0.0005921664373536939,-5.171790908260592e-5,0.0008394987206720873,7.204895416020011e-5,-0.0019144384985654776)
    elseif z ‚â• 13.655055978888104 # N = 13
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666,6.972813758365857e-5,-0.0005921664373536939,-5.171790908260592e-5,0.0008394987206720873,7.204895416020011e-5,-0.0019144384985654776,-0.00016251626278391583)
    elseif z ‚â• 11.93238782087875  # N = 14
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666,6.972813758365857e-5,-0.0005921664373536939,-5.171790908260592e-5,0.0008394987206720873,7.204895416020011e-5,-0.0019144384985654776,-0.00016251626278391583,0.00640336283380807)
    elseif z ‚â• 10.668852439197263 # N = 15
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666,6.972813758365857e-5,-0.0005921664373536939,-5.171790908260592e-5,0.0008394987206720873,7.204895416020011e-5,-0.0019144384985654776,-0.00016251626278391583,0.00640336283380807,0.0005401647678926045)
    elseif z ‚â• 9.715358216638403  # N = 16
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666,6.972813758365857e-5,-0.0005921664373536939,-5.171790908260592e-5,0.0008394987206720873,7.204895416020011e-5,-0.0019144384985654776,-0.00016251626278391583,0.00640336283380807,0.0005401647678926045,-0.02952788094569912)
    elseif z ‚â• 8.979120323411497  # N = 17
        @horner(inv(z),1.0,0.08333333333333333,0.003472222222222222,-0.0026813271604938273,-0.00022947209362139917,0.0007840392217200666,6.972813758365857e-5,-0.0005921664373536939,-5.171790908260592e-5,0.0008394987206720873,7.204895416020011e-5,-0.0019144384985654776,-0.00016251626278391583,0.00640336283380807,0.0005401647678926045,-0.02952788094569912,-0.002481743600264998)
    else
        gamma(z)*sqrt(z/2œÄ)*exp(z)/z^z
    end
end



stirlingremainder(z::Number,N::Int) = (1+zeta(N))*gamma(N)/((2œÄ)^(N+1)*z^N)/stirlingseries(z)

Aratio(n::Int,Œ±::Float64,Œ≤::Float64) = exp((n/2+Œ±+1/4)*log1p(-Œ≤/(n+Œ±+Œ≤+1))+(n/2+Œ≤+1/4)*log1p(-Œ±/(n+Œ±+Œ≤+1))+(n/2+1/4)*log1p(Œ±/(n+1))+(n/2+1/4)*log1p(Œ≤/(n+1)))
Aratio(n::Number,Œ±::Number,Œ≤::Number) = (1+(Œ±+1)/n)^(n+Œ±+1/2)*(1+(Œ≤+1)/n)^(n+Œ≤+1/2)/(1+(Œ±+Œ≤+1)/n)^(n+Œ±+Œ≤+1/2)/(1+(zero(Œ±)+zero(Œ≤))/n)^(n+1/2)

Cratio(n::Int,Œ±::Float64,Œ≤::Float64) = exp((n+Œ±+1/2)*log1p((Œ±-Œ≤)/(2n+Œ±+Œ≤+2))+(n+Œ≤+1/2)*log1p((Œ≤-Œ±)/(2n+Œ±+Œ≤+2))-log1p((Œ±+Œ≤+2)/2n)/2)/sqrt(n)
Cratio(n::Number,Œ±::Number,Œ≤::Number) = n^(-1/2)*(1+(Œ±+1)/n)^(n+Œ±+1/2)*(1+(Œ≤+1)/n)^(n+Œ≤+1/2)/(1+(Œ±+Œ≤+2)/2n)^(2n+Œ±+Œ≤+3/2)


AnŒ±Œ≤(n::Number,Œ±::Number,Œ≤::Number) = 2^(Œ±+Œ≤+1)/(2n+Œ±+Œ≤+1)*exp(lgamma(n+Œ±+1)-lgamma(n+Œ±+Œ≤+1)+lgamma(n+Œ≤+1)-lgamma(n+1))
function AnŒ±Œ≤(n::Integer,Œ±::Number,Œ≤::Number)
    if n==0
        2^(Œ±+Œ≤+1)*beta(Œ±+1,Œ≤+1)
    else
        val = AnŒ±Œ≤(0,Œ±,Œ≤)
        for i=1:n
            val *= (i+Œ±)*(i+Œ≤)/(i+Œ±+Œ≤)/i*(2i+Œ±+Œ≤-1)/(2i+Œ±+Œ≤+1)
        end
        val
    end
end

function AnŒ±Œ≤(n::Integer,Œ±::Float64,Œ≤::Float64)
    if n+min(Œ±,Œ≤,Œ±+Œ≤,0) ‚â• 7.979120323411497
        2 ^ (Œ±+Œ≤+1)/(2n+Œ±+Œ≤+1)*stirlingseries(n+Œ±+1)*Aratio(n,Œ±,Œ≤)/stirlingseries(n+Œ±+Œ≤+1)*stirlingseries(n+Œ≤+1)/stirlingseries(n+one(Float64))
    else
        (n+1)*(n+Œ±+Œ≤+1)/(n+Œ±+1)/(n+Œ≤+1)*AnŒ±Œ≤(n+1,Œ±,Œ≤)*((2n+Œ±+Œ≤+3)/(2n+Œ±+Œ≤+1))
    end
end


"""
The Lambda function ``\\Lambda(z) = \\frac{\\Gamma(z+\\frac{1}{2})}{\\Gamma(z+1)}`` for the ratio of gamma functions.
"""
Œõ(z::Number) = exp(lgamma(z+half(z))-lgamma(z+one(z)))
"""
For 64-bit floating-point arithmetic, the Lambda function uses the asymptotic series for ``\\tau`` in Appendix B of

I. Bogaert and B. Michiels and J. Fostier, ùí™(1) computation of Legendre polynomials and Gauss‚ÄìLegendre nodes and weights for parallel computing, *SIAM J. Sci. Comput.*, **34**:C83‚ÄìC101, 2012.
"""
function Œõ(x::Float64)
    if x > 9.84475
        xp = x+0.25
        @horner(inv(xp^2),1.0,-1.5625e-02,2.5634765625e-03,-1.2798309326171875e-03,1.343511044979095458984375e-03,-2.432896639220416545867919921875e-03,6.7542375336415716446936130523681640625e-03)/sqrt(xp)
    else
        (x+1.0)*Œõ(x+1.0)/(x+0.5)
    end
end

"""
The Lambda function ``\\Lambda(z,Œª‚ÇÅ,Œª‚ÇÇ) = \\frac{\\Gamma(z+\\lambda_1)}{Œì(z+\\lambda_2)}`` for the ratio of gamma functions.
"""
Œõ(z::Number,Œª‚ÇÅ::Number,Œª‚ÇÇ::Number) = exp(lgamma(z+Œª‚ÇÅ)-lgamma(z+Œª‚ÇÇ))
function Œõ(x::Float64,Œª‚ÇÅ::Float64,Œª‚ÇÇ::Float64)
    if min(x+Œª‚ÇÅ,x+Œª‚ÇÇ) ‚â• 8.979120323411497
        exp(Œª‚ÇÇ-Œª‚ÇÅ+(x-.5)*log1p((Œª‚ÇÅ-Œª‚ÇÇ)/(x+Œª‚ÇÇ)))*(x+Œª‚ÇÅ)^Œª‚ÇÅ/(x+Œª‚ÇÇ)^Œª‚ÇÇ*stirlingseries(x+Œª‚ÇÅ)/stirlingseries(x+Œª‚ÇÇ)
    else
        (x+Œª‚ÇÇ)/(x+Œª‚ÇÅ)*Œõ(x+1.,Œª‚ÇÅ,Œª‚ÇÇ)
    end
end

## TODO: deprecate when Lambert-W is supported in a mainstream repository such as SpecialFunctions.jl
"""
The principal branch of the Lambert-W function, defined by ``x = W_0(x) e^{W_0(x)}``, computed using Halley's method for ``x \\in [-e^{-1},\\infty)``.
"""
function lambertw(x::AbstractFloat)
    if x < -exp(-one(x))
        return throw(DomainError())
    elseif x == -exp(-one(x))
        return -one(x)
    elseif x < 0
        w0 = ‚ÑØ*x/(1+inv(inv(sqrt(2*‚ÑØ*x+2))+inv(‚ÑØ-1)-inv(sqrt(2))))
    else
        log1px = log1p(x)
        w0 = log1px*(1-log1p(log1px)/(2+log1px))
    end
    expw0 = exp(w0)
    w1 = w0 - (w0*expw0 - x)/((w0 + 1)*expw0 -
        (w0 + 2) * (w0*expw0 - x)/(2w0 + 2))
    while abs(w1/w0 - 1) > 2eps(typeof(x))
        w0 = w1
        expw0 = exp(w0)
        w1 = w0 - (w0*expw0 - x)/((w0 + 1)*expw0 -
            (w0 + 2) * (w0*expw0 - x)/(2w0 + 2))
    end
    return w1
end
lambertw(x::Real) = lambertw(float(x))


CnŒª(n::Integer,Œª::Float64) = 2^Œª/sqrtpi*Œõ(n+Œª)
CnŒª(n::Integer,Œª::Number) = 2^Œª/sqrt(oftype(Œª,œÄ))*Œõ(n+Œª)
function CnŒª(n::UnitRange{T},Œª::Number) where T<:Integer
    ret = Vector{typeof(Œª)}(undef, length(n))
    ret[1] = CnŒª(first(n),Œª)
    for i=2:length(n)
        ret[i] = (n[i]+Œª-half(Œª))/(n[i]+Œª)*ret[i-1]
    end
    ret
end

function CnmŒª(n::Integer,m::Integer,Œª::Number)
    if m == 0
        CnŒª(n,Œª)
    else
        (Œª+m-1)/2/m*(m-Œª)/(n+Œª+m)*CnmŒª(n,m-1,Œª)
    end
end


function CnŒ±Œ≤(n::Integer,Œ±::Number,Œ≤::Number)
    if n==0
        2^(Œ±+Œ≤+1)*beta(Œ±+1,Œ≤+1)/œÄ
    else
        val = CnŒ±Œ≤(0,Œ±,Œ≤)
        for i=1:n
            val *= (i+Œ±)*(i+Œ≤)/(i+(Œ±+Œ≤+1)/2)/(i+(Œ±+Œ≤)/2)
        end
        val
    end
end

function CnŒ±Œ≤(n::Integer,Œ±::Float64,Œ≤::Float64)
    if n+min(Œ±,Œ≤) ‚â• 7.979120323411497
        stirlingseries(n+Œ±+1)/sqrtpi/stirlingseries(2n+Œ±+Œ≤+2)*Cratio(n,Œ±,Œ≤)*stirlingseries(n+Œ≤+1)
    else
        (n+(Œ±+Œ≤+3)/2)/(n+Œ≤+1)*(n+(Œ±+Œ≤+2)/2)/(n+Œ±+1)*CnŒ±Œ≤(n+1,Œ±,Œ≤)
    end
end

function CnmŒ±Œ≤(n::Integer,m::Integer,Œ±::Number,Œ≤::Number)
    if m == 0
        CnŒ±Œ≤(n,Œ±,Œ≤)
    else
        CnmŒ±Œ≤(n,m-1,Œ±,Œ≤)/2(2n+Œ±+Œ≤+m+1)
    end
end


function CnmŒ±Œ≤(n::Integer,m::Integer,Œ±::AbstractArray{T},Œ≤::AbstractArray{T}) where T<:Number
    shp = promote_shape(size(Œ±),size(Œ≤))
    reshape([ CnmŒ±Œ≤(n,m,Œ±[i],Œ≤[i]) for i in eachindex(Œ±,Œ≤) ], shp)
end


"""
Modified Chebyshev moments of the first kind:

```math
    \\int_{-1}^{+1} T_n(x) {\\rm\\,d}x.
```
"""
function chebyshevmoments1(::Type{T}, N::Int) where T
    Œº = zeros(T, N)
    for i = 0:2:N-1
        @inbounds Œº[i+1] = two(T)/T(1-i^2)
    end
    Œº
end

"""
Modified Chebyshev moments of the first kind with respect to the Jacobi weight:

```math
    \\int_{-1}^{+1} T_n(x) (1-x)^\\alpha(1+x)^\\beta{\\rm\\,d}x.
```
"""
function chebyshevjacobimoments1(::Type{T}, N::Int, Œ±, Œ≤) where T
    Œº = zeros(T, N)
    N > 0 && (Œº[1] = 2 .^ (Œ±+Œ≤+1)*beta(Œ±+1,Œ≤+1))
    if N > 1
        Œº[2] = Œº[1]*(Œ≤-Œ±)/(Œ±+Œ≤+2)
        for i=1:N-2
            @inbounds Œº[i+2] = (2(Œ≤-Œ±)*Œº[i+1]-(Œ±+Œ≤-i+2)*Œº[i])/(Œ±+Œ≤+i+2)
        end
    end
    Œº
end

"""
Modified Chebyshev moments of the first kind with respect to the logarithmic weight:

```math
    \\int_{-1}^{+1} T_n(x) \\log\\left(\\frac{1-x}{2}\\right){\\rm\\,d}x.
```
"""
function chebyshevlogmoments1(::Type{T}, N::Int) where T
    Œº = zeros(T, N)
    N > 0 && (Œº[1] = -two(T))
    if N > 1
        Œº[2] = -one(T)
        for i=1:N-2
            cst = isodd(i) ? T(4)/T(i^2-4) : T(4)/T(i^2-1)
            @inbounds Œº[i+2] = ((i-2)*Œº[i]+cst)/(i+2)
        end
    end
    Œº
end

"""
Modified Chebyshev moments of the second kind:

```math
    \\int_{-1}^{+1} U_n(x) {\\rm\\,d}x.
```
"""
function chebyshevmoments2(::Type{T}, N::Int) where T
    Œº = zeros(T, N)
    for i = 0:2:N-1
        @inbounds Œº[i+1] = two(T)/T(i+1)
    end
    Œº
end

"""
Modified Chebyshev moments of the second kind with respect to the Jacobi weight:

```math
    \\int_{-1}^{+1} U_n(x) (1-x)^\\alpha(1+x)^\\beta{\\rm\\,d}x.
```
"""
function chebyshevjacobimoments2(::Type{T}, N::Int, Œ±, Œ≤) where T
    Œº = zeros(T, N)
    N > 0 && (Œº[1] = 2 .^ (Œ±+Œ≤+1)*beta(Œ±+1,Œ≤+1))
    if N > 1
        Œº[2] = 2Œº[1]*(Œ≤-Œ±)/(Œ±+Œ≤+2)
        for i=1:N-2
            @inbounds Œº[i+2] = (2(Œ≤-Œ±)*Œº[i+1]-(Œ±+Œ≤-i)*Œº[i])/(Œ±+Œ≤+i+2)
        end
    end
    Œº
end

"""
Modified Chebyshev moments of the second kind with respect to the logarithmic weight:

```math
    \\int_{-1}^{+1} U_n(x) \\log\\left(\\frac{1-x}{2}\\right){\\rm\\,d}x.
```
"""
function chebyshevlogmoments2(::Type{T}, N::Int) where T
    Œº = chebyshevlogmoments1(T, N)
    if N > 1
        Œº[2] *= two(T)
        for i=1:N-2
            @inbounds Œº[i+2] = 2Œº[i+2] + Œº[i]
        end
    end
    Œº
end


function sphrand(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for i = 1:m
        A[i,1] = rand(T)
    end
    for j = 1:n√∑2
        for i = 1:m-j
            A[i,2j] = rand(T)
            A[i,2j+1] = rand(T)
        end
    end
    A
end

function sphrandn(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for i = 1:m
        A[i,1] = randn(T)
    end
    for j = 1:n√∑2
        for i = 1:m-j
            A[i,2j] = randn(T)
            A[i,2j+1] = randn(T)
        end
    end
    A
end

function sphones(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for i = 1:m
        A[i,1] = one(T)
    end
    for j = 1:n√∑2
        for i = 1:m-j
            A[i,2j] = one(T)
            A[i,2j+1] = one(T)
        end
    end
    A
end

sphzeros(::Type{T}, m::Int, n::Int) where T = zeros(T, m, n)

"""
Pointwise evaluation of real orthonormal spherical harmonic:

```math
Y_\\ell^m(\\theta,\\varphi) = (-1)^{|m|}\\sqrt{(\\ell+\\frac{1}{2})\\frac{(\\ell-|m|)!}{(\\ell+|m|)!}} P_\\ell^{|m|}(\\cos\\theta) \\sqrt{\\frac{2-\\delta_{m,0}}{2\\pi}} \\left\\{\\begin{array}{ccc} \\cos m\\varphi & {\\rm for} & m \\ge 0,\\\\ \\sin(-m\\varphi) & {\\rm for} & m < 0.\\end{array}\\right.
```
"""
sphevaluate(Œ∏, œÜ, L, M) = sphevaluatepi(Œ∏/œÄ, œÜ/œÄ, L, M)

sphevaluatepi(Œ∏::Number, œÜ::Number, L::Integer, M::Integer) = sphevaluatepi(Œ∏, L, M)*sphevaluatepi(œÜ, M)

function sphevaluatepi(Œ∏::Number, L::Integer, M::Integer)
    ret = one(Œ∏)/sqrt(two(Œ∏))
    if M < 0 M = -M end
    c, s = cospi(Œ∏), sinpi(Œ∏)
    for m = 1:M
        ret *= sqrt((m+half(Œ∏))/m)*s
    end
    tc = two(c)*c

    if L == M
        return ret
    elseif L == M+1
        return sqrt(two(Œ∏)*M+3)*c*ret
    else
        temp = ret
        ret *= sqrt(two(Œ∏)*M+3)*c
        for l = M+1:L-1
            ret, temp = (sqrt(l+half(Œ∏))*tc*ret - sqrt((l-M)*(l+M)/(l-half(Œ∏)))*temp)/sqrt((l-M+1)*(l+M+1)/(l+3half(Œ∏))), ret
        end
        return ret
    end
end

sphevaluatepi(œÜ::Number, M::Integer) = sqrt((two(œÜ)-Œ¥(M, 0))/(two(œÜ)*œÄ))*(M ‚â• 0 ? cospi(M*œÜ) : sinpi(-M*œÜ))

function sphvrand(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for i = 1:m-1
        A[i,1] = rand(T)
    end
    for j = 1:n√∑2
        for i = 1:m-j+1
            A[i,2j] = rand(T)
            A[i,2j+1] = rand(T)
        end
    end
    A
end

function sphvrandn(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for i = 1:m-1
        A[i,1] = randn(T)
    end
    for j = 1:n√∑2
        for i = 1:m-j+1
            A[i,2j] = randn(T)
            A[i,2j+1] = randn(T)
        end
    end
    A
end

function sphvones(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for i = 1:m-1
        A[i,1] = one(T)
    end
    for j = 1:n√∑2
        for i = 1:m-j+1
            A[i,2j] = one(T)
            A[i,2j+1] = one(T)
        end
    end
    A
end

sphvzeros(::Type{T}, m::Int, n::Int) where T = sphzeros(T, m, n)

function diskrand(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for i = 1:m
        A[i,1] = rand(T)
    end
    for j = 1:n√∑2
        for i = 1:m-(j+1)√∑2
            A[i,2j] = rand(T)
            A[i,2j+1] = rand(T)
        end
    end
    A
end

function diskrandn(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for i = 1:m
        A[i,1] = randn(T)
    end
    for j = 1:n√∑2
        for i = 1:m-(j+1)√∑2
            A[i,2j] = randn(T)
            A[i,2j+1] = randn(T)
        end
    end
    A
end

function diskones(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for i = 1:m
        A[i,1] = one(T)
    end
    for j = 1:n√∑2
        for i = 1:m-(j+1)√∑2
            A[i,2j] = one(T)
            A[i,2j+1] = one(T)
        end
    end
    A
end

diskzeros(::Type{T}, m::Int, n::Int) where T = zeros(T, m, n)

function trirand(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for j = 1:n
        for i = 1:m+1-j
            A[i,j] = rand(T)
        end
    end
    A
end

function trirandn(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for j = 1:n
        for i = 1:m+1-j
            A[i,j] = randn(T)
        end
    end
    A
end

function triones(::Type{T}, m::Int, n::Int) where T
    A = zeros(T, m, n)
    for j = 1:n
        for i = 1:m+1-j
            A[i,j] = one(T)
        end
    end
    A
end

trizeros(::Type{T}, m::Int, n::Int) where T = zeros(T, m, n)

"""
Pointwise evaluation of triangular harmonic:

```math
\\tilde{P}_{\\ell,m}^{(\\alpha,\\beta,\\gamma)}(x,y).
```
"""
trievaluate(x, y, L, M, Œ±, Œ≤, Œ≥) = trievaluate(x, L, M, Œ±, Œ≤, Œ≥)*trievaluate(x, y, M, Œ≤, Œ≥)

function trievaluate(x::Number, L::Integer, M::Integer, Œ±::Number, Œ≤::Number, Œ≥::Number)

end

function trievaluate(x::Number, y::Number, M::Integer, Œ≤::Number, Œ≥::Number)

end

function tetrand(::Type{T}, l::Int, m::Int, n::Int) where T
    A = zeros(T, l, m, n)
    for k = 1:n
        for j = 1:m+1-k
            for i = 1:l+2-k-j
                A[i,j,k] = rand(T)
            end
        end
    end
    A
end

function tetrandn(::Type{T}, l::Int, m::Int, n::Int) where T
    A = zeros(T, l, m, n)
    for k = 1:n
        for j = 1:m+1-k
            for i = 1:l+2-k-j
                A[i,j,k] = randn(T)
            end
        end
    end
    A
end

function tetones(::Type{T}, l::Int, m::Int, n::Int) where T
    A = zeros(T, l, m, n)
    for k = 1:n
        for j = 1:m+1-k
            for i = 1:l+2-k-j
                A[i,j,k] = one(T)
            end
        end
    end
    A
end

tetzeros(::Type{T}, l::Int, m::Int, n::Int) where T = zeros(T, l, m, n)

function spinsphrand(::Type{T}, m::Int, n::Int, s::Int) where T
    A = zeros(T, m, n)
    as = abs(s)
    for i = 1:m-as
        A[i,1] = rand(T)
    end
    for j = 1:n√∑2
        for i = 1:m-max(j, as)
            A[i,2j] = rand(T)
            A[i,2j+1] = rand(T)
        end
    end
    A
end

function spinsphrandn(::Type{T}, m::Int, n::Int, s::Int) where T
    A = zeros(T, m, n)
    as = abs(s)
    for i = 1:m-as
        A[i,1] = randn(T)
    end
    for j = 1:n√∑2
        for i = 1:m-max(j, as)
            A[i,2j] = randn(T)
            A[i,2j+1] = randn(T)
        end
    end
    A
end

function spinsphones(::Type{T}, m::Int, n::Int, s::Int) where T
    A = zeros(T, m, n)
    as = abs(s)
    for i = 1:m-as
        A[i,1] = one(T)
    end
    for j = 1:n√∑2
        for i = 1:m-max(j, as)
            A[i,2j] = one(T)
            A[i,2j+1] = one(T)
        end
    end
    A
end

spinsphzeros(::Type{T}, m::Int, n::Int) where T = zeros(T, m, n)
